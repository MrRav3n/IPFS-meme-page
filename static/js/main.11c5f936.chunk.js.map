{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","E_IPFS_meme_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","E_IPFS_meme_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","E_IPFS_meme_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","captureFile","e","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","onSubmit","loading","add","state","error","path","addMeme","hash","account","loadWeb3","loadAccount","loadContract","ethereum","on","_ref","E_IPFS_meme_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","E_IPFS_meme_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","accounts","wrap","_context","prev","next","_this2","stop","_x","apply","arguments","loadMeme","web3","Web3","enable","currentProvider","alert","eth","getAccounts","net","getId","networkId","networkData","Meme","networks","meme","Contract","abi","address","methods","memePath","img","setMeme","send","from","_ref2","_callee7","_context7","_this3","checkBlockNumber","_x3","sleep","milliseconds","Promise","resolve","setTimeout","getBlockNumber","blockNumber","blockNumberNew","react__WEBPACK_IMPORTED_MODULE_7___default","_Navbar__WEBPACK_IMPORTED_MODULE_8__","className","_Main__WEBPACK_IMPORTED_MODULE_11__","bind","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Navbar","href","Main","react__WEBPACK_IMPORTED_MODULE_5___default","width","height","src","type","onChange","value","React"],"mappings":"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","file":"static/js/main.11c5f936.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react';\r\nimport Navbar from \"./Navbar\"\r\nimport './App.css';\r\nimport Web3 from 'web3'\r\nimport Main from './Main'\r\nimport Meme from '../abis/Meme.json'\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' })\r\n\r\nclass App extends Component {\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3();\r\n        await this.loadAccount();\r\n        await this.loadContract();\r\n        window.ethereum.on('accountsChanged', async (accounts)  => {\r\n          await this.loadAccount();\r\n        })\r\n        await this.loadMeme();\r\n    }\r\n    async loadWeb3() {\r\n\r\n        if(window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n    }\r\n    async loadAccount() {\r\n        const account = await window.web3.eth.getAccounts();\r\n        this.setState({account: account[0]});\r\n    }\r\n    async loadContract() {\r\n        const networkId = await window.web3.eth.net.getId();\r\n        const networkData = Meme.networks[networkId];\r\n        if(networkData) {\r\n            const meme = window.web3.eth.Contract(Meme.abi, networkData.address);\r\n            this.setState({meme});\r\n        } else {\r\n            alert(\"Cannot load contract (change network mayby)\")\r\n        }\r\n    }\r\n    async loadMeme() {\r\n        const memePath = await this.state.meme.methods.memePath().call();\r\n        this.setState({img: \"https://ipfs.infura.io/ipfs/\"+memePath})\r\n    }\r\n    async addMeme(meme) {\r\n        await this.state.meme.methods.setMeme(meme).send({from: this.state.account}, async (e) => {\r\n        await this.checkBlockNumber();\r\n        })\r\n    }\r\n    async checkBlockNumber() {\r\n       const sleep = (milliseconds) => {\r\n           return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n       };\r\n       const blockNumber = await window.web3.eth.getBlockNumber()\r\n       let blockNumberNew = await window.web3.eth.getBlockNumber()\r\n       while(blockNumber === blockNumberNew) {\r\n           blockNumberNew = await window.web3.eth.getBlockNumber()\r\n           await sleep(100);\r\n       }\r\n       await this.loadAccount();\r\n       await this.loadMeme();\r\n       this.setState({loading: false})\r\n\r\n   }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: null,\r\n            loading: false\r\n        }\r\n    }\r\n    captureFile = (e) => {\r\n\r\n         e.preventDefault();\r\n         const file = e.target.files[0]\r\n         const reader = new window.FileReader()\r\n         reader.readAsArrayBuffer(file)\r\n         reader.onloadend = () => {\r\n             this.setState({buffer: Buffer(reader.result)})\r\n\r\n         }\r\n         console.log()\r\n    }\r\n    onSubmit =(e) => {\r\n        this.setState({loading: true})\r\n        e.preventDefault();\r\n        ipfs.add(this.state.buffer, (error, result) => {\r\n            console.log(result[0].path)\r\n            this.addMeme(result[0].hash)\r\n            if(error) {\r\n                console.error(error)\r\n                return\r\n            }\r\n        })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Navbar account={this.state.account} />\r\n      {this.state.loading\r\n      ? <h1 className=\"display 2 text-center text-white\">Loading ..</h1>\r\n      : <Main img={this.state.img} captureFile={this.captureFile.bind(this)} onSubmit={this.onSubmit.bind(this)}/>}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\n    //Navbar with account address\r\n    function Navbar({account}) {\r\n\r\n            return(\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <div className=\"container\">\r\n                        <a className=\"navbar-brand\" href=\"https://github.com/MrRav3n/starter_kit\"><h3>Your Navbar</h3></a>\r\n                        <span className=\"text-white ml-auto \">\r\n                            <h5 className=\"text-white d-none d-md-block\">Your account: {account} </h5>\r\n                        </span>\r\n                    </div>\r\n                </nav>\r\n            );\r\n    }\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n    //Navbar with account address\r\n    class Main extends React.Component{\r\n\r\n        render() {\r\n            return(\r\n                <span className=\"text-center\">\r\n                <form className=\"container mt-5\" onSubmit={this.props.onSubmit}>\r\n                <img className=\" mb-5 rounded\" width=\"500\" height=\"400\" src={this.props.img} />\r\n                <h2  className=\"mb-3\">Change meme</h2>\r\n                <div className=\"custom-file row \">\r\n                    <input type=\"file\" className=\"custom-file-input col\"  onChange={this.props.captureFile}/>\r\n                    <label className=\"custom-file-label co\" >Choose file</label>\r\n\r\n                  </div>\r\n                  <input className=\"btn btn-primary mt-3 col-4\" type=\"submit\" value=\"Submit\" />\r\n\r\n                </form>\r\n                </span>\r\n            );\r\n\r\n        }\r\n    }\r\n\r\nexport default Main\r\n"],"sourceRoot":""}